# To apply in different environments use kubectl apply -f users.yml -n staging / prod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      name: springapppod
      labels:
        app: springapp
    spec:
      containers:
        - name: springappcontainer
          image: mylandmarktech/spring-boot-mongo
          ports:
            - containerPort: 8080
          env:
            - name: MONGO_DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: configmap
                  key: db-username
            - name: MONGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-password
                  key: db-password
            - name: MONGO_DB_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: configmap
                  key: db-hostname

---
apiVersion: v1
kind: Service
metadata:
  name: usersappsvc
spec:
  selector:
    app: springapp
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30050
  type: NodePort

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-hostpath
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /kube

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodbpvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: users-db
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      name: mongodbpod
      labels:
        app: mongodb
    spec:
      volumes:
        - name: pvc
          persistentVolumeClaim:
            claimName: mongodbpvc
      containers:
        - name: mongodbcontainer
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: configmap
                  key: db-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-password
                  key: db-password
          volumeMounts:
            - name: pvc
              mountPath: /data/db

---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap
data:
  db-username: devdb
  db-hostname: mongo
  db-password: devdb@123

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-password
type: Opaque
stringData:
  db-password:  devdb@123 #ZGV2ZGJAMTIz
  
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: users-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: users-app
  minReplicas: 3
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
        
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developer-role
rules:
  - apiGroups: [""]
    resources: ["pods", "deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["rollout.rollback"]
    
---
 kind: Group
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: developer-team
users:
- name: akin
- name: frank
- name: charlie
- name: shola
- name: kingsley */
---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developer-rolebinding
subjects:
- kind: Group
  name: developer-team
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer-role
  apiGroup: rbac.authorization.k8s.io
